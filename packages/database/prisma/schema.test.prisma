generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native", "linux-musl", "rhel-openssl-1.0.x"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum RoleName {
  user
  admin
}

enum OauthProvider {
  email
  github
  google
  stackoverflow
}

enum SnippetVisibility {
  public
  private
}

model Role {
  id          String   @id @db.VarChar(50)
  name        RoleName @unique
  level       Int
  description String?  @db.VarChar(200)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  User        User[]

  @@map("roles")
}

model User {
  id            String        @id @db.VarChar(50)
  email         String        @unique @db.VarChar(100)
  password      String?       @db.VarChar(100)
  username      String?       @db.VarChar(50)
  name          String        @db.VarChar(50)
  timezone      String?       @db.VarChar(50)
  isEnabled     Boolean       @default(false) @map("is_enabled") @db.TinyInt
  pictureUrl    String?       @map("picture_url") @db.VarChar(255)
  roleId        String        @map("role_id") @db.VarChar(50)
  oauthProvider OauthProvider
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  role          Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  folders       Folder[]
  snippets      Snippet[]
  sessions      Session[]

  @@index([username])
  @@index([roleId])
  @@map("users")
}

model Folder {
  id         String    @id @db.VarChar(50)
  userId     String    @map("user_id") @db.VarChar(50)
  parentId   String?   @map("parent_id")
  name       String    @db.VarChar(255)
  path       String?   @db.Text
  isFavorite Boolean   @default(false) @map("is_favorite")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Folder?   @relation(name: "parent_folder", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subFolders Folder[]  @relation("parent_folder")
  snippets   Snippet[]

  @@index([name])
  @@index([isFavorite])
  @@index([userId])
  @@index([parentId])
  @@unique([userId, parentId, name], name: "folder_name_unique_constraint")
  @@map("folders")
}

model Snippet {
  id            String            @id @db.VarChar(50)
  userId        String            @map("user_id") @db.VarChar(50)
  folderId      String            @map("folder_id")
  name          String            @db.VarChar(255)
  content       String            @db.Text
  contentHtml   String?           @db.Text @map("content_html")
  language      String            @db.VarChar(20)
  size          Int               @default(0) @db.Int
  visibility    SnippetVisibility @default(public)
  description   String?           @db.Text
  lineHighlight String?           @db.Text @map("line_highlight")
  theme         String            @db.VarChar(20)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  user          User              @relation(fields: [userId], references: [id], onDelete: Restrict)
  folder        Folder            @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([userId])
  @@index([folderId])
  @@index([language])
  @@index([visibility])
  @@map("snippets")
}

model Session {
  id           String   @id @default(cuid())
  token        String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
